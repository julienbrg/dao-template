{
  "address": "0x0152ee45780385dACCCCB128D816031CfFe5F36B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "operationType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ProofClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "operationType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "generateProof",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc411a6ecc3873cff0a6d716a3849641434e55a6bc5c7951dc0b2bca023e9afd3",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x27292E1a901E3E0bE7d144aDba4CAD07da2d8a42",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "518229",
    "logsBloom": "0x
    "blockHash": "0x1115c45c99cbb520ae8840bc2518558624ddc7c53c3aa27b3c3ac33e259e0179",
    "transactionHash": "0xc411a6ecc3873cff0a6d716a3849641434e55a6bc5c7951dc0b2bca023e9afd3",
    "logs": [],
    "blockNumber": 20641662,
    "cumulativeGasUsed": "562044",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96a9008abeaccbd30a9b75989ce7f0fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"operationType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ProofClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"operationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"generateProof\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Web3 Hackers Collective\",\"custom:security-contact\":\"julien@strat.cc\",\"details\":\"Handles proof generation, verification, and tracking for cross-chain operations\",\"events\":{\"ProofClaimed(uint8,bytes,uint256)\":{\"details\":\"Emitted when a proof is claimed\"}},\"kind\":\"dev\",\"methods\":{\"generateProof(address,uint8,bytes,uint256)\":{\"params\":{\"contractAddress\":\"Address of contract generating the proof\",\"nonce\":\"Current nonce for this operation type\",\"operationType\":\"Type of operation being performed\",\"params\":\"Operation parameters\"},\"returns\":{\"proof\":\"Encoded proof data\"}},\"getNextNonce(ProofHandler.ProofStorage storage,uint8)\":{\"params\":{\"operationType\":\"Type of operation\",\"storage_\":\"Proof storage struct\"},\"returns\":{\"nonce\":\"Next nonce value\"}},\"incrementNonce(ProofHandler.ProofStorage storage,uint8)\":{\"params\":{\"operationType\":\"Type of operation\",\"storage_\":\"Proof storage struct\"},\"returns\":{\"nonce\":\"New nonce value\"}},\"verifyAndClaimProof(bytes,address,ProofHandler.ProofStorage storage)\":{\"params\":{\"contractAddress\":\"Address of contract claiming the proof\",\"proof\":\"Proof to verify and claim\",\"storage_\":\"Proof storage struct\"},\"returns\":{\"nonce\":\"The operation sequence number\",\"operationType\":\"The type of operation being performed\",\"params\":\"The operation parameters\"}}},\"title\":\"Proof Handler Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"generateProof(address,uint8,bytes,uint256)\":{\"notice\":\"Generates a proof for cross-chain operations\"},\"getNextNonce(ProofHandler.ProofStorage storage,uint8)\":{\"notice\":\"Gets the next nonce for an operation type\"},\"incrementNonce(ProofHandler.ProofStorage storage,uint8)\":{\"notice\":\"Increments the nonce for an operation type\"},\"verifyAndClaimProof(bytes,address,ProofHandler.ProofStorage storage)\":{\"notice\":\"Verifies and claims a proof\"}},\"notice\":\"Library for standardized cross-chain proof generation and verification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/variants/crosschain/ProofHandler.sol\":\"ProofHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/variants/crosschain/ProofHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Proof Handler Library\\n * @author Web3 Hackers Collective\\n * @notice Library for standardized cross-chain proof generation and verification\\n * @dev Handles proof generation, verification, and tracking for cross-chain operations\\n * @custom:security-contact julien@strat.cc\\n */\\nlibrary ProofHandler {\\n    /// @notice Tracks which proofs have been applied on each chain\\n    struct ProofStorage {\\n        mapping(bytes32 => bool) updateAppliedOnChain;\\n        mapping(uint8 => uint256) currentNonce;\\n    }\\n\\n    /// @dev Emitted when a proof is claimed\\n    event ProofClaimed(uint8 indexed operationType, bytes params, uint256 nonce);\\n\\n    /**\\n     * @notice Generates a proof for cross-chain operations\\n     * @param contractAddress Address of contract generating the proof\\n     * @param operationType Type of operation being performed\\n     * @param params Operation parameters\\n     * @param nonce Current nonce for this operation type\\n     * @return proof Encoded proof data\\n     */\\n    function generateProof(\\n        address contractAddress,\\n        uint8 operationType,\\n        bytes memory params,\\n        uint256 nonce\\n    ) public pure returns (bytes memory proof) {\\n        bytes32 message = keccak256(\\n            abi.encodePacked(contractAddress, operationType, params, nonce)\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\n\\n        return abi.encode(operationType, params, nonce, digest);\\n    }\\n\\n    /**\\n     * @notice Verifies and claims a proof\\n     * @param proof Proof to verify and claim\\n     * @param contractAddress Address of contract claiming the proof\\n     * @param storage_ Proof storage struct\\n     * @return operationType The type of operation being performed\\n     * @return params The operation parameters\\n     * @return nonce The operation sequence number\\n     */\\n    function verifyAndClaimProof(\\n        bytes memory proof,\\n        address contractAddress,\\n        ProofStorage storage storage_\\n    ) public returns (uint8 operationType, bytes memory params, uint256 nonce) {\\n        bytes32 digest;\\n        (operationType, params, nonce, digest) = abi.decode(\\n            proof,\\n            (uint8, bytes, uint256, bytes32)\\n        );\\n\\n        bytes32 proofHash = keccak256(proof);\\n        require(!storage_.updateAppliedOnChain[proofHash], \\\"Proof already claimed\\\");\\n        require(nonce == storage_.currentNonce[operationType] + 1, \\\"Invalid nonce\\\");\\n\\n        bytes32 message = keccak256(\\n            abi.encodePacked(contractAddress, operationType, params, nonce)\\n        );\\n        bytes32 expectedDigest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        require(digest == expectedDigest, \\\"Invalid proof\\\");\\n\\n        storage_.updateAppliedOnChain[proofHash] = true;\\n        storage_.currentNonce[operationType] = nonce;\\n\\n        emit ProofClaimed(operationType, params, nonce);\\n\\n        return (operationType, params, nonce);\\n    }\\n\\n    /**\\n     * @notice Gets the next nonce for an operation type\\n     * @param storage_ Proof storage struct\\n     * @param operationType Type of operation\\n     * @return nonce Next nonce value\\n     */\\n    function getNextNonce(\\n        ProofStorage storage storage_,\\n        uint8 operationType\\n    ) public view returns (uint256 nonce) {\\n        return storage_.currentNonce[operationType] + 1;\\n    }\\n\\n    /**\\n     * @notice Increments the nonce for an operation type\\n     * @param storage_ Proof storage struct\\n     * @param operationType Type of operation\\n     * @return nonce New nonce value\\n     */\\n    function incrementNonce(\\n        ProofStorage storage storage_,\\n        uint8 operationType\\n    ) public returns (uint256 nonce) {\\n        storage_.currentNonce[operationType]++;\\n        return storage_.currentNonce[operationType];\\n    }\\n}\\n\",\"keccak256\":\"0x3719e47c508f29977d48842c5c1d27cce7cb289cbb592526f170f98135ff41a7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61086261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632b276f581461005b5780633b0d4dd71461008157806373521781146100a1578063c0af6591146100c1575b600080fd5b61006e610069366004610450565b6100f0565b6040519081526020015b60405180910390f35b81801561008d57600080fd5b5061006e61009c366004610450565b610118565b6100b46100af366004610561565b610158565b6040516100789190610619565b8180156100cd57600080fd5b506100e16100dc36600461062c565b610214565b60405161007893929190610683565b60ff811660009081526001808401602052604082205461010f916106c5565b90505b92915050565b60ff81166000908152600183016020526040812080549082610139836106d8565b90915550505060ff166000908152600191909101602052604090205490565b606060008585858560405160200161017394939291906106f1565b6040516020818303038152906040528051906020012090506000816040516020016101ca91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b604051602081830303815290604052805190602001209050858585836040516020016101f99493929190610740565b60405160208183030381529060405292505050949350505050565b600060606000808680602001905181019061022f919061076f565b8a516020808d01919091206000818152918b905260409091205494985092965090945092509060ff16156102a25760405162461bcd60e51b8152602060048201526015602482015274141c9bdbd988185b1c9958591e4818db185a5b5959605a1b60448201526064015b60405180910390fd5b60ff8516600090815260018088016020526040909120546102c2916106c5565b83146103005760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610299565b60008786868660405160200161031994939291906106f1565b60405160208183030381529060405280519060200120905060008160405160200161037091907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6040516020818303038152906040528051906020012090508084146103c75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610299565b600083815260208981526040808320805460ff1916600190811790915560ff8b16808552908c019092529182902087905590517f9d572fd94428aa262dfbc3962dbfc27e1c732588d2f37703185192eb7d39a7cc90610429908990899061080a565b60405180910390a25050505093509350939050565b60ff8116811461044d57600080fd5b50565b6000806040838503121561046357600080fd5b8235915060208301356104758161043e565b809150509250929050565b80356001600160a01b038116811461049757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104db576104db61049c565b604052919050565b600067ffffffffffffffff8211156104fd576104fd61049c565b50601f01601f191660200190565b600082601f83011261051c57600080fd5b813561052f61052a826104e3565b6104b2565b81815284602083860101111561054457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561057757600080fd5b61058085610480565b935060208501356105908161043e565b9250604085013567ffffffffffffffff8111156105ac57600080fd5b6105b88782880161050b565b949793965093946060013593505050565b60005b838110156105e45781810151838201526020016105cc565b50506000910152565b600081518084526106058160208601602086016105c9565b601f01601f19169290920160200192915050565b60208152600061010f60208301846105ed565b60008060006060848603121561064157600080fd5b833567ffffffffffffffff81111561065857600080fd5b6106648682870161050b565b93505061067360208501610480565b9150604084013590509250925092565b60ff8416815260606020820152600061069f60608301856105ed565b9050826040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610112576101126106af565b6000600182016106ea576106ea6106af565b5060010190565b6bffffffffffffffffffffffff198560601b16815260ff60f81b8460f81b1660148201526000835161072a8160158501602088016105c9565b6015920191820192909252603501949350505050565b60ff8516815260806020820152600061075c60808301866105ed565b6040830194909452506060015292915050565b6000806000806080858703121561078557600080fd5b84516107908161043e565b602086015190945067ffffffffffffffff8111156107ad57600080fd5b8501601f810187136107be57600080fd5b80516107cc61052a826104e3565b8181528860208385010111156107e157600080fd5b6107f28260208301602086016105c9565b60408801516060909801519699909850945050505050565b60408152600061081d60408301856105ed565b9050826020830152939250505056fea26469706673582212203dae3b101192a9db985457cad109d67a3cd7e229e3e6792a1b933b258581f0e664736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632b276f581461005b5780633b0d4dd71461008157806373521781146100a1578063c0af6591146100c1575b600080fd5b61006e610069366004610450565b6100f0565b6040519081526020015b60405180910390f35b81801561008d57600080fd5b5061006e61009c366004610450565b610118565b6100b46100af366004610561565b610158565b6040516100789190610619565b8180156100cd57600080fd5b506100e16100dc36600461062c565b610214565b60405161007893929190610683565b60ff811660009081526001808401602052604082205461010f916106c5565b90505b92915050565b60ff81166000908152600183016020526040812080549082610139836106d8565b90915550505060ff166000908152600191909101602052604090205490565b606060008585858560405160200161017394939291906106f1565b6040516020818303038152906040528051906020012090506000816040516020016101ca91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b604051602081830303815290604052805190602001209050858585836040516020016101f99493929190610740565b60405160208183030381529060405292505050949350505050565b600060606000808680602001905181019061022f919061076f565b8a516020808d01919091206000818152918b905260409091205494985092965090945092509060ff16156102a25760405162461bcd60e51b8152602060048201526015602482015274141c9bdbd988185b1c9958591e4818db185a5b5959605a1b60448201526064015b60405180910390fd5b60ff8516600090815260018088016020526040909120546102c2916106c5565b83146103005760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610299565b60008786868660405160200161031994939291906106f1565b60405160208183030381529060405280519060200120905060008160405160200161037091907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6040516020818303038152906040528051906020012090508084146103c75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610299565b600083815260208981526040808320805460ff1916600190811790915560ff8b16808552908c019092529182902087905590517f9d572fd94428aa262dfbc3962dbfc27e1c732588d2f37703185192eb7d39a7cc90610429908990899061080a565b60405180910390a25050505093509350939050565b60ff8116811461044d57600080fd5b50565b6000806040838503121561046357600080fd5b8235915060208301356104758161043e565b809150509250929050565b80356001600160a01b038116811461049757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104db576104db61049c565b604052919050565b600067ffffffffffffffff8211156104fd576104fd61049c565b50601f01601f191660200190565b600082601f83011261051c57600080fd5b813561052f61052a826104e3565b6104b2565b81815284602083860101111561054457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561057757600080fd5b61058085610480565b935060208501356105908161043e565b9250604085013567ffffffffffffffff8111156105ac57600080fd5b6105b88782880161050b565b949793965093946060013593505050565b60005b838110156105e45781810151838201526020016105cc565b50506000910152565b600081518084526106058160208601602086016105c9565b601f01601f19169290920160200192915050565b60208152600061010f60208301846105ed565b60008060006060848603121561064157600080fd5b833567ffffffffffffffff81111561065857600080fd5b6106648682870161050b565b93505061067360208501610480565b9150604084013590509250925092565b60ff8416815260606020820152600061069f60608301856105ed565b9050826040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610112576101126106af565b6000600182016106ea576106ea6106af565b5060010190565b6bffffffffffffffffffffffff198560601b16815260ff60f81b8460f81b1660148201526000835161072a8160158501602088016105c9565b6015920191820192909252603501949350505050565b60ff8516815260806020820152600061075c60808301866105ed565b6040830194909452506060015292915050565b6000806000806080858703121561078557600080fd5b84516107908161043e565b602086015190945067ffffffffffffffff8111156107ad57600080fd5b8501601f810187136107be57600080fd5b80516107cc61052a826104e3565b8181528860208385010111156107e157600080fd5b6107f28260208301602086016105c9565b60408801516060909801519699909850945050505050565b60408152600061081d60408301856105ed565b9050826020830152939250505056fea26469706673582212203dae3b101192a9db985457cad109d67a3cd7e229e3e6792a1b933b258581f0e664736f6c63430008140033",
  "devdoc": {
    "author": "Web3 Hackers Collective",
    "custom:security-contact": "julien@strat.cc",
    "details": "Handles proof generation, verification, and tracking for cross-chain operations",
    "events": {
      "ProofClaimed(uint8,bytes,uint256)": {
        "details": "Emitted when a proof is claimed"
      }
    },
    "kind": "dev",
    "methods": {
      "generateProof(address,uint8,bytes,uint256)": {
        "params": {
          "contractAddress": "Address of contract generating the proof",
          "nonce": "Current nonce for this operation type",
          "operationType": "Type of operation being performed",
          "params": "Operation parameters"
        },
        "returns": {
          "proof": "Encoded proof data"
        }
      },
      "getNextNonce(ProofHandler.ProofStorage storage,uint8)": {
        "params": {
          "operationType": "Type of operation",
          "storage_": "Proof storage struct"
        },
        "returns": {
          "nonce": "Next nonce value"
        }
      },
      "incrementNonce(ProofHandler.ProofStorage storage,uint8)": {
        "params": {
          "operationType": "Type of operation",
          "storage_": "Proof storage struct"
        },
        "returns": {
          "nonce": "New nonce value"
        }
      },
      "verifyAndClaimProof(bytes,address,ProofHandler.ProofStorage storage)": {
        "params": {
          "contractAddress": "Address of contract claiming the proof",
          "proof": "Proof to verify and claim",
          "storage_": "Proof storage struct"
        },
        "returns": {
          "nonce": "The operation sequence number",
          "operationType": "The type of operation being performed",
          "params": "The operation parameters"
        }
      }
    },
    "title": "Proof Handler Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "generateProof(address,uint8,bytes,uint256)": {
        "notice": "Generates a proof for cross-chain operations"
      },
      "getNextNonce(ProofHandler.ProofStorage storage,uint8)": {
        "notice": "Gets the next nonce for an operation type"
      },
      "incrementNonce(ProofHandler.ProofStorage storage,uint8)": {
        "notice": "Increments the nonce for an operation type"
      },
      "verifyAndClaimProof(bytes,address,ProofHandler.ProofStorage storage)": {
        "notice": "Verifies and claims a proof"
      }
    },
    "notice": "Library for standardized cross-chain proof generation and verification",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}